searchState.loadedDescShard("variant_myth", 0, "A variant annotator.\nStruct to store annotation\nAnnotations database\nCommand Line Interface declaration of project variant_myth\nError struct of project variant_myth\nInterval tree implementation, largely inspired by/copied …\nA Myth store annotation about a variant.\nSequence database\nStruct to perform translate\nVariant database\nGet myth about variants\nFor each variants found matching annotations\nStore information of a Gff3 field\nStore attribute of gff record\nAnnotation is in forward strand\nDefine annotation frame\nAnnotation frame is 1\nAnnotation is in reverse strand\nDefine annotation strand\nAnnotation frame is 2\nAnnotation frame is Unknow\nAnnotation frame is 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a new annotations from a csv::ByteRecord\nCreate an attribute from u8 slice\nGet attribute annotation\nGet exon_number\nGet feature\nCreate interval associate with annotation\nGet seqname\nGet seqname\nGet strand\nGet transcript_id\nGet transcript id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStore annotations information associate to intervals\nReturns the argument unchanged.\nBuild a AnnotationsDataBase from a reader\nGet annotation match with seqname and interval\nCalls <code>U::from(self)</code>.\nA variant annotater.\nGet annotations reader\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet output writer\nGet quiet\nGet reference reader\nGet timestamp granularity\nGet translate reader\nGet variant reader\nGet verbosity level\nContains the error value\nEnum to manage error\nError in float parsing\nNot a valid Frame\nNot a valid strand\nError in int parsing\nError in logging system configuration\nContains the success value\nAlias of result\nstd Input Output error\nBad vcf record\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>find</code> query on the interval tree does not directly return …\nA <code>find</code> query on the interval tree does not directly return …\nAlias of Range\nDefine an interval tree\nGet a reference to the data for this entry\nThe upper bound of the range (exclusive).\nFind overlapping intervals in the index. Returns a vector …\nFind overlapping intervals in the index\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex interval tree\nInsert a new interval in tree\nGet a reference to the interval for this entry\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new interval_tree\nThe lower bound of the range (inclusive).\nStruct to store annotation information\nBuilder for <code>AnnotationMyth</code>.\nError type for AnnotationMythBuilder\nStore information around variant\nUninitialized field\nCustom validation error\nAdd transcript from source\nBuilds a new <code>AnnotationMyth</code>.\nGet builder of AnnotationMyth\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a Myth from variant\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSource of annotation\nSource of annotation\nTranscript id\nTranscript id\nStore sequence data\nReturns the argument unchanged.\nBuild a SequenceDataBase from a reader\nGet interval\nGet transcript sequence\nCalls <code>U::from(self)</code>.\nPerform reverse complement\nPerform a sequence translation\nReturns the argument unchanged.\nBuild a Translate table from a reader\nCalls <code>U::from(self)</code>.\nGet table\nTranslate sequence\nStore Variant content\nStruct to generate Variant iterator from vcf\nAlternative sequence associate with variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a Variant from csv::ByteRecord\nCreate a VcfReader from a std::io::BufRead\nCreate interval associate with variant\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPosition of the variant\nReference sequence associate with variant\nSequence name associate with variant")